{"version":3,"sources":["ListItem.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["List","state","compeleted","style","textDecorationLine","selected","_this","setState","react_default","a","createElement","this","onClick","props","item","clearItem","Component","App","formData","list","hadelChange","e","target","value","clickSubmit","event","preventDefault","newItem","copyArray","slice","push","clearList","delet","remItem","filter","items","_this2","lists","map","ListItem","clearItems","className","onSubmit","type","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"wOAiCeA,wNA3BXC,MACI,CACIC,YAAY,EACZC,MAAO,CAAEC,mBAAoB,WAIrCC,SAAW,WACHC,EAAKL,MAAMC,WACXI,EAAKC,SAAS,CAAEL,YAAY,EAAOC,MAAO,CAAEC,mBAAoB,UAGhEE,EAAKC,SAAS,CAAEL,YAAY,EAAMC,MAAO,CAAEC,mBAAoB,2FAKnE,OACII,EAAAC,EAAAC,cAAA,KAAGP,MAAOQ,KAAKV,MAAME,MAAOS,QAASD,KAAKN,UAA1C,WAAyDM,KAAKE,MAAMC,KAC/DH,KAAKI,UAAWJ,KAAKE,MAAMb,aArBzBgB,cC2FJC,6MAvFbhB,MAAQ,CAENiB,SAAU,CACRJ,KAAM,IAERK,KAAM,MAKRC,YAAc,SAACC,GACbf,EAAKC,SAAS,CACZW,SAAU,CACRJ,KAAMO,EAAEC,OAAOC,YAMrBC,YAAc,SAACC,GACbA,EAAMC,iBAEN,IAAIC,EAAUrB,EAAKL,MAAMiB,SAEnBU,EAAYtB,EAAKL,MAAMkB,KAAKU,MAAM,GAExCF,EAAQb,KAAOR,EAAKL,MAAMiB,SAASJ,KAId,KAAjBa,EAAQb,OACVc,EAAUE,KAAKH,GACfrB,EAAKC,SAAS,CAEZY,KAAMS,EACNV,SAAU,CACRJ,KAAM,UAMdiB,UAAY,WACVzB,EAAKC,SAAS,CACZY,KAAM,QAIVJ,UAAY,SAACiB,GACX,IAAMC,EAAU3B,EAAKL,MAAMkB,KAAKe,OAAO,SAAAC,GACrC,OAAO7B,EAAKa,OAASa,IAEvB1B,EAAKC,SAAS,CAAEW,SAAUe,6EAInB,IAAAG,EAAAzB,KAED0B,EAAQ1B,KAAKV,MAAMkB,KAAKmB,IAAI,SAAAxB,GAAI,OAEpCN,EAAAC,EAAAC,cAAC6B,EAAD,CAAUzB,KAAMA,EAAKA,KAAMC,UAAWqB,EAAKI,eAC7C,OACEhC,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,0BACbjC,EAAAC,EAAAC,cAAA,MAAI+B,UAAU,OAAd,eACAjC,EAAAC,EAAAC,cAAA,QAAMgC,SAAU/B,KAAKa,YAAaiB,UAAU,QAC1CjC,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,eACbjC,EAAAC,EAAAC,cAAA,SAAO+B,UAAU,eAAeE,KAAK,OACnCC,YAAY,kBAAkBrB,MAAOZ,KAAKV,MAAMiB,SAASJ,KAAM+B,SAAUlC,KAAKS,cAChFZ,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,sBACbjC,EAAAC,EAAAC,cAAA,UAAQiC,KAAK,SAASF,UAAU,6BAAhC,OACAjC,EAAAC,EAAAC,cAAA,UAAQE,QAASD,KAAKoB,UAAWU,UAAU,6BAA3C,iBAINjC,EAAAC,EAAAC,cAAA,WACG2B,EACD7B,EAAAC,EAAAC,cAAA,QAAM+B,UAAU,QAAhB,uDAEFjC,EAAAC,EAAAC,cAAA,QAAM+B,UAAU,UAAhB,gDAhFUzB,aCME8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.e1938c84.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass List extends Component {\r\n    //set state to defult data\r\n    state =\r\n        {\r\n            compeleted: false,\r\n            style: { textDecorationLine: \"none\" }\r\n        }\r\n\r\n    //create function for selected stated and set it to defualt\r\n    selected = () => {\r\n        if (this.state.compeleted) {\r\n            this.setState({ compeleted: false, style: { textDecorationLine: \"none\" } })\r\n        }\r\n        else {\r\n            this.setState({ compeleted: true, style: { textDecorationLine: \"line-through\" } })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <p style={this.state.style} onClick={this.selected} > âœŽ {this.props.item}\r\n                {this.clearItem}{this.props.List}\r\n            </p>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default List","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItem from './ListItem'\n\n\nclass App extends Component {\n  //set state to store data enter by user \n  state = {\n\n    formData: {\n      item: '',\n    },\n    list: []\n\n  }\n\n  //handel change data \n  hadelChange = (e) => {\n    this.setState({\n      formData: {\n        item: e.target.value\n      }\n    })\n  }\n\n  //add data to list\n  clickSubmit = (event) => {\n    event.preventDefault();\n    //crearte new varible and save state data from list\n    let newItem = this.state.formData\n    //take copy of array from list \n    const copyArray = this.state.list.slice(0)\n    //add a new data to the array list\n    newItem.item = this.state.formData.item;\n    //add the new list data to the array\n    //use the state with our new array copy \n\n    if (newItem.item !== \"\") {\n      copyArray.push(newItem);\n      this.setState({\n\n        list: copyArray,\n        formData: {\n          item: \"\"\n        }\n      })\n    }\n\n  }\n  clearList = () => {\n    this.setState({\n      list: []\n    })\n  }\n  //clear single item from list \n  clearItem = (delet) => {\n    const remItem = this.state.list.filter(items => {\n      return this.list !== delet\n    })\n    this.setState({ formData: remItem })\n\n  }\n\n  render() {\n    //set state to go through the map list to return list in new array\n    const lists = this.state.list.map(item =>\n      //pass item to listitem component through props\n      <ListItem item={item.item} clearItem={this.clearItems} />)\n    return (\n      <div className=\"App container p-5 mt-5\">\n        <h1 className=\"set\">To Do List </h1>\n        <form onSubmit={this.clickSubmit} className=\"mb-3\">\n          <div className=\"input-group\">\n            <input className=\"form-control\" type=\"text\"\n              placeholder=\"Enter task ....\" value={this.state.formData.item} onChange={this.hadelChange} />\n            <div className=\"input-group-append\">\n              <button type=\"submit\" className=\"btn btn-outline-secondary\">Add</button>\n              <button onClick={this.clearList} className=\"btn btn-outline-secondary\">Clear List</button>\n            </div>\n          </div>\n        </form>\n        <div>\n          {lists}\n          <span className=\"set2\"> ðŸ˜Š Let start to Do list App Experience </span>\n        </div>\n        <span className=\"footer\" >Copyright Â© 2019 By Nahed Hawsawi</span>\n\n      </div>\n    )\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//add bootstrap\nimport \"../node_modules/bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}